// class Solution {
//     public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
//         int n = amount.length;
//         Map<Integer, List<Integer>> graph = new HashMap<>();
//         for (int[] edge : edges) {
//             graph.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(edge[1]);
//             graph.computeIfAbsent(edge[1], k -> new ArrayList<>()).add(edge[0]);
//         }
//         int[] timeTakenByBob = new int[n];
//         Arrays.fill(timeTakenByBob, Integer.MAX_VALUE);
//         findBobPath(graph, bob, 0, timeTakenByBob, new boolean[n], 0);
//         return dfsAlice(graph, amount, 0, -1, 0, timeTakenByBob, 0);
//     }
//     private boolean findBobPath(Map<Integer, List<Integer>> graph, int current, int target, int[] time, boolean[] visited, int depth) {
//         visited[current] = true;
//         if (current == target) {
//             time[current] = depth;
//             return true;
//         }
//         for (int neighbor : graph.get(current)) {
//             if (!visited[neighbor]) {
//                 if (findBobPath(graph, neighbor, target, time, visited, depth + 1)) {
//                     time[current] = depth;
//                     return true;
//                 }
//             }
//         }
//         return false;
//     }
//     private int dfsAlice(Map<Integer, List<Integer>> graph, int[] amount, int node, int parent, int depth, int[] timeTakenByBob, int currentProfit) {
//         if (depth < timeTakenByBob[node]) {
//             currentProfit += amount[node];
//         } else if (depth == timeTakenByBob[node]) {
//             currentProfit += amount[node] / 2;  
//         }
//         int maxProfit = Integer.MIN_VALUE;
//         boolean isLeaf = true;
//         for (int neighbor : graph.get(node)) {
//             if (neighbor != parent) {
//                 isLeaf = false;
//                 maxProfit = Math.max(maxProfit, dfsAlice(graph, amount, neighbor, node, depth + 1, timeTakenByBob, currentProfit));
//             }
//         }
//         return isLeaf ? currentProfit : maxProfit;
//     }
// }
class Solution {
    private Map<Integer, Integer> bobPath;
    private boolean[] visited;
    private List<List<Integer>> tree;
    private int maxIncome = Integer.MIN_VALUE;
    private boolean findBobPath(int sourceNode, int time) {
        bobPath.put(sourceNode, time);
        visited[sourceNode] = true;
        if (sourceNode == 0) {
            return true;
        }
        for (int adjacentNode : tree.get(sourceNode)) {
            if (!visited[adjacentNode] && findBobPath(adjacentNode, time + 1)) {
                return true;
            }
        }
        bobPath.remove(sourceNode);
        return false;
    }
    private void findAlicePath(
        int sourceNode,
        int time,
        int income,
        int[] amount
    ) {
        visited[sourceNode] = true;
        if (
            !bobPath.containsKey(sourceNode) || time < bobPath.get(sourceNode)
        ) {
            income += amount[sourceNode];
        }
        else if (time == bobPath.get(sourceNode)) {
            income += amount[sourceNode] / 2;
        }
        if (tree.get(sourceNode).size() == 1 && sourceNode != 0) {
            maxIncome = Math.max(maxIncome, income);
        }
        for (int adjacentNode : tree.get(sourceNode)) {
            if (!visited[adjacentNode]) {
                findAlicePath(adjacentNode, time + 1, income, amount);
            }
        }
    }
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        int n = amount.length;
        tree = new ArrayList<>();
        bobPath = new HashMap<>();
        visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            tree.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            tree.get(edge[0]).add(edge[1]);
            tree.get(edge[1]).add(edge[0]);
        }
        findBobPath(bob, 0);
        Arrays.fill(visited, false);
        findAlicePath(0, 0, 0, amount);
        return maxIncome;
    }
}
