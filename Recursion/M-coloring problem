class Solution {
    boolean graphColoring(int v, List<int[]> edges, int m) {
        // code here
         boolean[][] graph = new boolean[v][v];
        for (int[] edge : edges) {
            int u = edge[0];
            int w = edge[1];
            graph[u][w] = true;
            graph[w][u] = true;  
        }
        int[] color = new int[v];
        Arrays.fill(color, 0);  
        return graphColoringUtil(0, color, m, graph);
    }
    private static boolean isSafe(int v, int[] color, boolean[][] graph, int c) {
        for (int i = 0; i < graph.length; i++) {
            if (graph[v][i] && color[i] == c) {
                return false;
            }
        }
        return true;
    }
    private static boolean graphColoringUtil(int v, int[] color, int m, boolean[][] graph) {

        if (v == graph.length) {
            return true;
        }
        for (int c = 1; c <= m; c++) {
            if (isSafe(v, color, graph, c)) {
                color[v] = c;  
                if (graphColoringUtil(v + 1, color, m, graph)) {
                    return true;
                }
                color[v] = 0;
            }
        }return false;
    }
