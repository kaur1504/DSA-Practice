class Solution {
    public boolean exist(char[][] board, String word) {
    int m = board.length ;
    int n = board[0].length ;
        int idx = 0 ;
        for(int i=0 ; i<board.length ;i++){
            for(int j=0 ;j<board[0].length ;j++){
                if(board[i][j]==word.charAt(idx)){
                    if(search(board , word , i , j ,idx , m ,n)){
                        return true;
                    }
                }
            }
        }
        return false ;
    }
    public boolean search(char[][] board , String word ,int row , int col ,int idx , int m , int n ){
        if(idx == word.length()){
            return true ;
        }
        if(row < 0 || col < 0 || row == m || col == n || board[row][col] != 
        word.charAt(idx) || board[row][col] == '!'){
            return false ;
        }
            char c = board[row][col];
            board[row][col] ='!';
            boolean top = search(board, word, row - 1, col, idx + 1, m, n);
            boolean right = search(board, word, row, col + 1, idx + 1, m, n);
            boolean bottom = search(board, word, row + 1, col, idx + 1, m, n);
            boolean left = search(board, word, row, col - 1, idx + 1, m, n);
        board[row][col] = c;
        return top || right || bottom || left;
    }
}
