class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxWindow = 0;
        int st = 0;
        int e = 0;
        int[] arr = new int[256];
        while (e < s.length()){
            int index = s.charAt(e);
            arr[index]++;
            while (arr[index] == 2){
                int r_index = s.charAt(st);
                arr[r_index]--;
                st++;
            }
            int curr = e - st + 1;
            maxWindow = Math.max(curr , maxWindow);
            e++;
        }
        return maxWindow;
    }
}
///////////second approach using Hashmap//////////////
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maximum=0;
        int start=0;
        HashMap<Character,Integer> map=new HashMap<>();
        for(int end=0;end<s.length();end++){
            char ch=s.charAt(end);
            if (map.containsKey(ch)) {
                start=Math.max(start, map.get(ch) + 1);
            }
            map.put(ch, end);
            maximum = Math.max(maximum, end-start+1);
        }
        return maximum;
    }
}
