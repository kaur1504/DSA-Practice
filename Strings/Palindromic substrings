class Solution {
    public int countSubstrings(String s) {
        int count=0;
        int start=0;
        int end=s.length()-1;
        for(int i=0;i<s.length();i++){
            for(int j=i;j<s.length();j++){
                if(func(s,i,j)){
                    count++;
                }
            }
        }    
        return count;
    }
    public boolean func(String s,int start,int end){
        while(start<=end){
            if(s.charAt(start)!=s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
} 
///////////////////////////optimal approach/////////////////////\
class Solution {
    public int countSubstrings(String s) {
        int n = s.length();
        int ans = 0;
        for(int i=0;i<n;i++) {
            int even = palindromeCount(s, i, i+1);
            int odd = palindromeCount(s, i-1, i+1);
            ans += even + odd + 1;
        }
        return ans;
    }

    public int palindromeCount(String s, int left, int right) {
        int count = 0;
        while(left >= 0 && right < s.length() && s.charAt(left--) == s.charAt(right++)) {
            count++;
        }
        return count;
    }
}
