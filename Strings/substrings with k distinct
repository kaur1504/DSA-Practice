class Solution {
    int substrCount(String str, int k) {
return countAtMostK(str, k) - countAtMostK(str, k - 1);
    }

    private static int countAtMostK(String str, int k) {
        if (k == 0) return 0;

        Map<Character, Integer> freqMap = new HashMap<>();
        int start = 0, end = 0, count = 0;

        while (end < str.length()) {
            char endChar = str.charAt(end);
            freqMap.put(endChar, freqMap.getOrDefault(endChar, 0) + 1);

            // Reduce the window if distinct characters exceed k
            while (freqMap.size() > k) {
                char startChar = str.charAt(start);
                freqMap.put(startChar, freqMap.get(startChar) - 1);
                if (freqMap.get(startChar) == 0) {
                    freqMap.remove(startChar);
                }
                start++;
            }

            // Count substrings in the current window
            count += end - start + 1;
            end++;
        }
        return count;
    }
