///////////////////////////O(N3)////////////////////
class Solution {
    long max=0;
    public long maximumTripletValue(int[] nums) {
        int n=nums.length;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                for(int k=j+1;k<n;k++){
                    long count=(long)(nums[i]-nums[j])*nums[k];
                    max=Math.max(max,count);
                }
            }
        }
        return max;
    }
}
//////////////////////O(n)//////////////////
class Solution {
    public long maximumTripletValue(int[] nums) {
        long maxTriplet = 0, maxElement = 0, maxDiff = 0;
        for (int num : nums) {
            maxTriplet = Math.max(maxTriplet, maxDiff * num);
            maxDiff = Math.max(maxDiff, maxElement - num);
            maxElement = Math.max(maxElement, num);
        }
        return maxTriplet;
    }
}
