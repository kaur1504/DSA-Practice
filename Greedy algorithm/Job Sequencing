class Solution {
    static class Job {
        int id, deadline, profit;
        Job(int id, int deadline, int profit) {
            this.id = id;
            this.deadline = deadline;
            this.profit = profit;
        }
    }

    public static int[] jobScheduling(int[] id, int[] deadline, int[] profit) {
        int n = id.length;
        Job[] jobs = new Job[n];
        for (int i = 0; i < n; i++) {
            jobs[i] = new Job(id[i], deadline[i], profit[i]);
        }
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);
        int maxDeadline = 0;
        for (int d : deadline) {
            maxDeadline = Math.max(maxDeadline, d);
        }
        boolean[] slot = new boolean[maxDeadline + 1];
        Arrays.fill(slot, false);
        int jobCount = 0, totalProfit = 0;
        for (Job job : jobs) {
            for (int j = Math.min(maxDeadline, job.deadline); j > 0; j--) {
                if (!slot[j]) {
                    slot[j] = true; // Mark the slot as occupied
                    jobCount++;
                    totalProfit += job.profit;
                    break;
                }
            }
        }
        return new int[]{jobCount, totalProfit};
    }
}
