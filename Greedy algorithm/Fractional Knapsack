class Solution {
    // Function to get the maximum total value in the knapsack.
    static class Item {
        double value, weight, ratio;
        Item(double value, double weight) {
            this.value = value;
            this.weight = weight;
            this.ratio = value / weight;
        }
    }
    double fractionalKnapsack(List<Integer> val, List<Integer> wt, int capacity) {
        int n = val.size();
        Item[] items = new Item[n];
        for (int i = 0; i < n; i++) {
            items[i] = new Item(val.get(i), wt.get(i));
        }
        Arrays.sort(items, (a, b) -> Double.compare(b.ratio, a.ratio));
        double maxValue = 0.0; 
        for (Item item : items) {
            if (capacity >= item.weight) {
                maxValue += item.value;
                capacity -= item.weight;
            }
            else {
                maxValue += item.ratio * capacity;
                break;
            }
        }
        return Math.round(maxValue * 1e6) / 1e6; 
    }
}
