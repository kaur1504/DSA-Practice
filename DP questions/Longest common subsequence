class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int l1 = text1.length();
        int l2 = text2.length();
        int[][] lcs = new int[l2+1][l1+1];
        for(int i=1;i<l2+1;i++){
            for(int j=1;j<l1+1;j++){
                if(text1.charAt(j-1)==text2.charAt(i-1)){
                    lcs[i][j] = lcs[i-1][j-1]+1;
                }
                else{
                    lcs[i][j] = Math.max(lcs[i-1][j],lcs[i][j-1]);
                }
            }
        }
        return lcs[l2][l1];//bottom-up approach

    //     int m=text1.length();
    //     int n=text2.length();
    //     int[][]dp=new int[m][n];
    //     for(int[] a:dp){
    //         Arrays.fill(a,-1);
    //     }
    //     return lcs(text1,text2,0,0,dp);
    // }

    // //     // if(text1.length()<text2.length()){
    // //     //     return 0;
    // //     // }
    // //     return lcs(text1,text2,text1.length(),text2.length());

    // // }
    // public static int lcs(String text1,String text2,int m,int n,int[][]dp){
    //     if(text1.length()==m || text2.length()==n){
    //         return 0;
    //     }
    //     int ans=0;
    //     if(dp[m][n]!=-1){
    //         return dp[m][n];
    //     }
    //      if (text1.charAt(m) == text2.charAt(n)) {
    //         ans= 1 + lcs(text1, text2, m+1, n+1,dp);
    //     }
    //     else{
    //         int an=lcs(text1,text2,m+1,n,dp);
    //         int bn=lcs(text1,text2,m,n+1,dp);
    //         ans=Math.max(an,bn);
    //     }
    //     return dp[m][n]=ans;//top-down approach
    }

}
